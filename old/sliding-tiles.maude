fmod CONF is
  sorts Conf AConf . --- concrete, abstract Conf
  
  op error : -> Conf . --- FIXME : for downTerm default
  op alpha : Conf -> AConf .
endfm

fmod SLIDER-FUNCS is
  pr NAT .
  pr CONF .

  op none : -> Conf [ctor] .
  op tile : Nat Nat Nat -> Conf [ctor] . --- num, row, col
  op __ : Conf Conf -> Conf [ctor comm assoc id: none] .

  vars N I J : Nat .
  eq tile(N,I,J) tile(N,I,J) = tile(N,I,J) . --- ASSUMPTION: Conf should be as Set!
endfm

fmod SLIDER-ACONF is
  inc SLIDER-FUNCS .
  pr INT .

  sort Disp . --- Displacement (right means the target is on the right w.r.t current pos)
  ops zero stay up right down left upLeft upRight downLeft downRight : -> Disp .
  op none : -> AConf [ctor] .
  op tile : Disp Nat Nat -> AConf [ctor] . --- disp, row, col
  op __ : AConf AConf -> AConf [ctor comm assoc id: none] .


  vars N I J I0 J0 : Nat .
  vars C : Conf .
  vars AC : AConf .
  vars D : Disp .
  ops modLeft modRight modUp modDown : Nat -> Nat .
  op size : -> Nat .
  eq size = 3 .

  eq modLeft(0) = 2 .     ceq modRight(s s I) = I if s s s I == size .
  eq modLeft(s I) = I .    eq modRight(I) = s I [owise].
  eq modUp(0) = 2 .       ceq modDown(s s I) = I if s s s I == size .
  eq modUp(s I) = I .      eq modDown(I) = s I [owise].

  op getDisp : Nat Nat Nat -> Disp .
  ceq getDisp(N,I,J) = stay if (N quo size) == I /\ (N rem size) == J .
  ceq getDisp(N,I,J) = up if (N quo size) < I /\ (N rem size) == J .
  ceq getDisp(N,I,J) = right if (N quo size) == I /\ (N rem size) > J .
  ceq getDisp(N,I,J) = down if (N quo size) > I /\ (N rem size) == J .
  ceq getDisp(N,I,J) = left if (N quo size) == I /\ (N rem size) < J .
  ceq getDisp(N,I,J) = upLeft if (N quo size) < I /\ (N rem size) < J .
  ceq getDisp(N,I,J) = upRight if (N quo size) < I /\ (N rem size) > J .
  ceq getDisp(N,I,J) = downLeft if (N quo size) > I /\ (N rem size) < J .
  ceq getDisp(N,I,J) = downRight if (N quo size) > I /\ (N rem size) > J .

  op getTile : Conf Nat Nat -> AConf .
  eq getTile(tile(N,I,J) C, I, J) = tile(getDisp(N,I,J), I, J) .


  ceq alpha(tile(0, I, J) C) = shiftTiles(
    getTile(C, modUp(I), modLeft(J))    getTile(C, modUp(I), J)    getTile(C, modUp(I), modRight(J))
    getTile(C, I, modLeft(J))           tile(zero, I, J)           getTile(C, I, modRight(J))
    getTile(C, modDown(I), modLeft(J))  getTile(C, modDown(I), J)  getTile(C, modDown(I), modRight(J))
  , I0, J0) if I0 := min(I, modUp(I), modDown(I)) /\ J0 := min(J, modLeft(J), modRight(J)) .

  op shiftTiles : AConf Nat Nat -> AConf .
  eq shiftTiles(tile(D, I, J) AC, I0, J0) = tile(D, I - I0, J - J0) shiftTiles(AC, I0, J0) .
  eq shiftTiles(none, I0, J0) = none .

  op isGoal : Conf -> Bool .
  eq isGoal(tile(N,I,J) C) = (N quo size) == I and (N rem size) == J and isGoal(C) .
  eq isGoal(none) = true .

endfm

mod SLIDER-ARULES is
  pr SLIDER-ACONF .
  vars I J : Nat .
  rl tile(upRight,I,J) => tile(up,I,J) .
  rl tile(upRight,I,J) => tile(right,I,J) .
  rl tile(downRight,I,J) => tile(down,I,J) .
  rl tile(downRight,I,J) => tile(right,I,J) .
  rl tile(upLeft,I,J) => tile(up,I,J) .
  rl tile(upLeft,I,J) => tile(left,I,J) .
  rl tile(downLeft,I,J) => tile(down,I,J) .
  rl tile(downLeft,I,J) => tile(left,I,J) .
endm

mod SLIDER is
  pr SLIDER-ARULES .
---  pr SLIDER-ACONF .

  vars N I J : Nat .

  rl [up] : tile(0,s I,J) tile(N,I,J) => tile(0,I,J) tile(N,s I,J) .
  rl [right] : tile(0,I,J) tile(N,I,s J) => tile(0,I,s J) tile(N,I,J) .
  rl [down] : tile(0,I,J) tile(N,s I,J) => tile(0,s I,J) tile(N,I,J) .
  rl [left] : tile(0,I,s J) tile(N,I,J) => tile(0,I,J) tile(N,I,s J) .
endm

mod TEST is
  pr SLIDER .

  ops goal conf0 : -> Conf .
  eq goal = tile(0,0,0) tile(1,0,1) tile(2,0,2) tile(3,1,0) tile(4,1,1) tile(5,1,2) tile(6,2,0) tile(7,2,1) tile(8,2,2) .
  eq conf0 = tile(0, 0, 0) tile(1, 1, 0) tile(2, 0, 2) tile(3, 1, 1) tile(4, 0, 1) tile(5, 1, 2) tile(6, 2, 0) tile(7, 2, 1) tile(8, 2, 2) .
endm

red size .
---rew [100] goal . --- shuffle
---search [1] conf0 =>* (tile(0,0,0) tile(1,0,1) tile(2,0,2) tile(3,1,0) tile(4,1,1) tile(5,1,2) tile(6,2,0) tile(7,2,1) tile(8,2,2)) .