load data-structures/priority-queue.maude

fmod UNIV is
  sort Univ .
  op data : Universal -> Univ [ctor poly (1)] .
  op error : -> Univ .
endfm


fmod SYSTEM is --- Ground System R
  sort State .
  op init : -> State .
  op error : -> [State] . --- for downTerm
endfm


fmod PROP is
  sorts Prop Formula .
  subsort Prop < Formula .
  op _/\_ : Formula Formula -> Formula [ctor assoc] .
  op ~_ : Formula -> Formula [ctor] .

  sort PropList .
  subsort Prop < PropList .
  op nil : -> PropList [ctor] .
  op _;_ : PropList PropList -> PropList [ctor assoc id: nil] .
endfm


fmod MDP is --- Markov Decision Process
  pr UNIV . pr FLOAT . pr QID . pr PROP .

  --- MDP State
  sorts FeatVec MDPState .
  op <_> : FeatVec -> MDPState [ctor] .
  op nil : -> FeatVec [ctor] .
  op _:_ : Prop Bool -> FeatVec [ctor] . --- TODO: this should bind tighter than _,_
  op _,_ : FeatVec FeatVec -> FeatVec [ctor assoc id: nil] .
  
  --- MDPActBindings
  sorts MDPActBinding MDPActBinding? MDPActBindings .
  subsort MDPActBinding < MDPActBinding? < MDPActBindings .
  op none : -> MDPActBinding? [ctor] .
  op _:=_ : Qid Univ -> MDPActBinding [ctor] .
  op _;_ : MDPActBindings MDPActBindings -> MDPActBindings [ctor assoc comm id: none] .

  --- MDPAct
  sort MDPAct .
  op eps : -> MDPAct [ctor] .
  op _{_} : Qid MDPActBindings -> MDPAct [ctor] .

  --- MDP reward
  op reward : MDPState -> Float .
endfm


fmod SATISFACTION is
  pr PROP . pr SYSTEM . pr MDP .
  op _|=_ : State Prop -> Bool [frozen] .
  op _|=_ : MDPState Prop -> Bool [frozen] .
  ---op _|=_ : MDPAct Prop -> Bool [frozen] .
endfm


fmod OBSERVATION is
  ---pr PROP . pr SYSTEM . pr MDP .
  pr SATISFACTION .
  pr META-LEVEL .

  var SB : Substitution . var V : Univ .
  vars Q Q' : Qid . var X : Variable . var T : Term .
  var S : State . var P : Prop . var PL : PropList .

  --- state observation
  op obs : State -> MDPState . --- (User)
  op obsUpto : State PropList -> FeatVec . --- predicate abstraction
  eq obsUpto(S, P ; PL) = (P : (S |= P)) , obsUpto(S, PL) .
  eq obsUpto(S, nil) = nil .

  --- data observation
  op obs : Qid Qid Univ -> MDPActBinding? . --- (User)
  eq obs(Q, Q', V) = none [owise] .

  --- action observation
  op $obs : Qid Substitution -> MDPActBindings .
  eq $obs(Q, (X <- T) ; SB)
    = obs(Q, getName(X), downTerm('data[T], (error).Univ)) ; $obs(Q, SB) .
  eq $obs(Q, none) = none .

  ---op obs : Qid Substitution -> MDPAct . TODO: delete this line
  ---eq obs(Q, SB) = Q { $obs(Q,SB) } . TODO: delete this line
  
  --- TODO: consider defining Act in SYSTEM module
  sort Act .
  op eps : -> Act [ctor] .
  op _{_} : Qid Substitution -> Act [ctor] .

  op obs : Act -> MDPAct .
  eq obs(Q { SB }) = Q { $obs(Q,SB) } .
endfm


----------------------------------------------------------------------
--- Search relevant definitions (Users should not care about them) ---
----------------------------------------------------------------------


fmod TRACE is
  pr SYSTEM .
  sort ResultTrace .
  op nil : -> ResultTrace [ctor] .
  op state : State -> ResultTrace [ctor] .
  op _===>_ : ResultTrace ResultTrace -> ResultTrace [ctor assoc id: nil] .
endfm


fmod SEARCH-CTX is
  pr TRACE . pr OBSERVATION .

  sort SearchCtx . --- e.g. timestamp, depth, etc. for each term
  --- # of States Explored, depth, parent state, applied action 
  op ctx : Nat Nat Term Act -> SearchCtx [ctor] .
  op initCtx : -> SearchCtx .
  eq initCtx = ctx(0,0,upTerm(init),eps) .
  --- TODO: previous action, etc (for debugging purposes)
  vars N D P : Nat . vars T T' : Term . vars A A' : Act .
  var CTX : SearchCtx .

  op getNStates : SearchCtx -> Nat .
  eq getNStates(ctx(N,D,T,A)) = N .
  op getDepth : SearchCtx -> Nat .
  eq getDepth(ctx(N,D,T,A)) = D .
  op getParent : SearchCtx -> Term .
  eq getParent(ctx(N,D,T,A)) = T .
  op getAction : SearchCtx -> Act .
  eq getAction(ctx(N,D,T,A)) = A .

  op updateCtx : SearchCtx Term Act -> SearchCtx .
  eq updateCtx(ctx(N,D,T,A),T',A') = ctx(N + 1,D + 1,T',A') . --- TODO : Fix N + 1
endfm


fmod SCORE is
  pr OBSERVATION . pr SEARCH-CTX .
  sorts BotScore Score .
  subsort BotScore < Score .
  op bot : -> BotScore .
  op score : State Act SearchCtx -> Score .
  ops _gt_ _lt_ _le_ : Score Score -> Bool .
  
  var SC : Score .

  eq bot gt bot = false .
  eq bot lt bot = false .
  eq bot le bot = true . 

  --- default is the last score to be popped
  eq bot gt SC = true .  eq SC gt bot = false .
  eq bot lt SC = false . eq SC lt bot = true .
  eq bot le SC = false . eq SC le bot = true .
endfm


fmod DFS-SCORE is
  pr SCORE . pr NAT .
  subsort Nat < Score .

  var S : State . var A : Act .
  var CTX : SearchCtx .
  vars N N' : Nat .

  eq score(S, A, CTX) = getNStates(CTX) .

  eq N gt N' = N < N' .
  eq N lt N' = N > N' .
  eq N le N' = N >= N' .  
endfm


fmod QTABLE-BASE is
  inc SCORE . pr FLOAT .
  subsort Float < Score .

  var S : State . var A : Act .
  var MS : MDPState . var MA : MDPAct .
  vars P P' : Prop . var PL : PropList .
  var CTX : SearchCtx .
  vars F F' : Float .
  vars SG SG' : Formula . --- subgoal

  --- q & qUpto takes subgoal as the first argument
  op q : Prop MDPState MDPAct -> Score .
  op q : Prop Prop MDPAct -> Score .
  op qUpto : Formula MDPState MDPAct PropList -> Score . --- q value of (s,a) upto basis PL
  eq qUpto(SG /\ SG', MS, MA, PL) = qUpto(SG, MS, MA, PL) /\ qUpto(SG', MS, MA, PL) . --- goal decomposition
  
  eq qUpto(P', MS, MA, nil) = bot . --- start from bot
 ceq qUpto(P', MS, MA, P ; PL) = q(P', P, MA) \/ qUpto(P', MS, MA, PL) if MS |= P . --- basis decomposition
  eq qUpto(P', MS, MA, P ; PL) = qUpto(P', MS, MA, PL) [owise] .

  ---eq score(S, A, CTX) = (user-defined)

  --- score ordering
  eq F gt F' = F < F' .
  eq F lt F' = F > F' .
  eq F le F' = F >= F' .

  --- score join
  op _\/_ : Score Score -> Score .
  eq F \/ F' = max(F, F') .
  eq bot \/ F = F .
  eq F \/ bot = F .
  eq bot \/ bot = bot .

  --- score meet
  op _/\_ : Score Score -> Score .
  eq F /\ F' = min(F, F') .
  eq bot /\ F = F .
  eq F /\ bot = F .
  eq bot /\ bot = bot .
endfm


fmod QUEUE-ITEM is
    protecting SCORE .
    protecting META-TERM .

    sort QItem .
    op [_,_,_] : Term SearchCtx Score -> QItem [ctor] .

    var T : Term . var C : SearchCtx . var S : Score .
    
    ---op getScore : QItem -> Score .
    ---eq getScore([T,C,S]) = S .
endfm


view QItem from TRIV to QUEUE-ITEM is
  sort Elt to QItem .
endv


fmod QUEUE-ITEM<= is
    protecting QUEUE-ITEM .

    vars T T' : Term .
    vars S S' : Score .
    vars C C' : SearchCtx .

    ops _>_ _<_ _<=_ : QItem QItem -> Bool .
    eq [T, C, S] > [T', C', S'] = S gt S' .
    eq [T, C, S] < [T', C', S'] = S lt S' .
    eq [T, C, S] <= [T', C', S'] = S le S' .
endfm


view QItem<= from TOSET<= to QUEUE-ITEM<= is
  sort Elt to QItem .
endv

------------------------------------------------------------------

fmod TERM-SET is
  pr META-TERM .
  sort TermSet .

  var T : Term . var TS : TermSet .

  op termElt : Term -> TermSet [ctor] .
  op mtTermSet : -> TermSet [ctor] .
  op _;_ : TermSet TermSet -> TermSet [ctor assoc comm id: mtTermSet] .
  eq termElt(T) ; termElt(T) = termElt(T) .

  op _in_ : Term TermSet -> Bool .
  eq T in (termElt(T) ; TS) = true .
  eq T in TS = false [owise] .
endfm


fmod LABEL-LIST is
  pr META-MODULE .
  sort Label LabelList .
  subsort Label < LabelList .

  vars T T' : Term . var Q : Qid .
  var ATTS : AttrSet . var RS : RuleSet . var COND : Condition .

  op labelElt : Qid -> Label [ctor] .
  op nilLabel : -> LabelList [ctor] .
  op __ : LabelList LabelList -> LabelList [ctor assoc id: nilLabel] .

  op getLabels : RuleSet -> LabelList .
  eq getLabels(rl T => T' [label(Q) ATTS] . RS) = labelElt(Q) getLabels(RS) .
  eq getLabels(crl T => T' if COND [label(Q) ATTS] . RS) = labelElt(Q) getLabels(RS) .
  eq getLabels(none) = nilLabel .
endfm


fmod SEARCH is
  pr META-LEVEL .
  pr SCORE .
  pr TERM-SET .
  pr LEFTIST-TREES{QItem<=} .
  pr LIST{QItem} *
    (op __ : List{QItem} List{QItem} -> List{QItem} to _;_) .
  pr LABEL-LIST .
  pr SATISFACTION .

  vars M : Module .
  vars T T' : Term .
  var P : Prop .
  vars N N' : Nat .
  vars QUE : LTree{QItem<=} . vars NQUE : NeLTree{QItem<=} .
  vars SC SC' : Score .
  vars ITEM : QItem . vars ITEMS ITEMS' : List{QItem} .
  vars VIS VIS' : TermSet .
  var Q : Qid . var L : Label . var LL : LabelList .
  vars CTX CTX' : SearchCtx . var RT : Result4Tuple .
  var ACT : Act .
  var RES : SearchResult? .

  ---  module, current state, action label, ctx, sol num
  op nbrs : Module Term LabelList SearchCtx TermSet Nat -> List{QItem} .
  eq nbrs(M, T, nilLabel, CTX, VIS, N) = nil .
  eq nbrs(M, T, (labelElt(Q) LL), CTX, VIS, N) = nbrs(M, T, LL, CTX, VIS, 0) [owise] . --- metaXapply returns failure
 ceq nbrs(M, T, (labelElt(Q) LL), CTX, VIS, N)
    = ITEMS ; nbrs(M, T, (labelElt(Q) LL), CTX, VIS, N + 1)
    if RT := metaXapply(M, T, Q, none, 0, unbounded, N) /\
       ACT := Q { getSubstitution(RT) } /\
       CTX' := updateCtx(CTX,T,ACT) /\ --- FIXME!
       ITEMS := if getTerm(RT) in VIS then nil else [getTerm(RT), CTX', score(downTerm(T,error), ACT, CTX')] fi .

  ---  nbrs "away from" VIS : module, current state, ctx, visited
  op nbrs : Module Term SearchCtx TermSet -> List{QItem} .
  eq nbrs(M, T, CTX, VIS) = nbrs(M, T, getLabels(getRls(M)), CTX, VIS, 0) .

  op insertAll : List{QItem} LTree{QItem<=} -> LTree{QItem<=} .
  eq insertAll(nil, QUE) = QUE .
  eq insertAll(ITEM ; ITEMS, QUE) = insertAll(ITEMS, insert(ITEM, QUE)) . ---[print "push"] .

  op checkSAT : Term Prop -> Bool .
  eq checkSAT(T,P) = downTerm(T,error) |= P .

  op visited : Term List{QItem} -> Bool .
  eq visited(T, ITEMS ; [T,CTX,SC] ; ITEMS') = true .
  eq visited(T, ITEMS) = false [owise] .

  sorts SearchResult SearchResult? .
  subsort SearchResult < SearchResult? .
  op some : State Nat -> SearchResult [ctor] . --- TODO: some : NeQItem -> SearchResult
  op none : Nat -> SearchResult? [ctor] .

  --- model, goal, priority queue, visited set, # explored states 
  op search : Module Prop NeLTree{QItem<=} TermSet Nat -> SearchResult? .
 ceq search(M, P, NQUE, VIS, N)
    = if T in VIS ---visited(T, VIS)
        then search(M, P, deleteMin(NQUE), VIS, N)
        else
          if checkSAT(T, P)
            then some(downTerm(T,error), s(N)) ---some([T,CTX,SC])
            else search(M, P, insertAll(nbrs(M,T,CTX,VIS'), deleteMin(NQUE)), VIS', s(N))
          fi
      fi
    if [T,CTX,SC] := findMin(NQUE) /\
       VIS' := (termElt(T) ; VIS) .
  eq search(M, P, QUE, VIS, N) = none(N) [owise] .

  op search : Module Term Prop -> SearchResult? .
  eq search(M,T,P) = search(M, P, insert([T, initCtx, bot],empty), mtTermSet, 0) .
endfm
