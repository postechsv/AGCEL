--- Peterson's Mutex algorithm for N process in Maude
--- from The Art of Multiprocessor Programming (Herlihy), p.28

fmod FILTER-SYNTAX is
  protecting NAT .

  sort Mode . --- idle wait(L) where L : current level
  ops on wait crit : -> Mode .

  sorts Proc ProcSet .
  subsort Proc < ProcSet .
  op proc : Nat Nat Mode -> Proc [ctor] . --- proc(PID, level, Mode)
  op __ : ProcSet ProcSet -> ProcSet [assoc comm] .

  sort Vict VictSet .
  subsort Vict < VictSet .
  op vict : Nat Nat -> Vict [ctor] . --- level, PID
  op __ : VictSet VictSet -> VictSet [assoc comm] .

  sort Conf .
  op _;_ : VictSet ProcSet -> Conf .

  vars I J LI LJ : Nat .
  var PS : ProcSet . var VS : VictSet . var M : Mode .

  op conflict : Nat Nat Conf -> Bool .
  ceq conflict(I, LI, VS ; proc(J, LJ, M) PS) = true if I =/= J and LJ > LI .
  ceq conflict(I, LI, vict(LI, I) VS ; proc(J, LI, M) PS) = true if I =/= J .
  eq conflict(I, LI, VS ; PS) = false [owise] .
endfm


mod FILTER is
  protecting FILTER-SYNTAX .

  var PS : ProcSet .  var VS : VictSet .
  vars I J L : Nat .

  op @NL : -> Nat . --- #procs, #levels (maxLevel = NL - 1)


  rl [wait] : vict(s L, J) VS ; proc(I, L, on) PS => vict(s L, I) VS ; proc(I, s L, wait) PS .

  crl [filter] : VS ; proc(I, L, wait) PS => VS ; proc(I, L, on) PS
    if L < @NL and not conflict(I, L, VS ; proc(I, L, wait) PS) .

  crl [crit] : VS ; proc(I, L, on) PS => VS ; proc(I, L, crit) PS
    if s L = @NL .

  rl [exit] : VS ; proc(I, L, crit) PS => VS ; proc(I, 0, on) PS .
endm


mod FILTER-TEST is
  protecting FILTER .

  op init : -> Conf .
  eq init = vict(1,0) vict(2,0) vict(3,0) vict(4,0) ; proc(1, 0, on) proc(2, 0, on) proc(3, 0, on) proc(4, 0, on) proc(5, 0, on) .
  eq @NL = 5 .
endm


search [1] init =>* VS:VictSet ; proc(I:Nat, L:Nat, crit) proc(J:Nat, L:Nat, crit) PS:ProcSet such that I:Nat =/= J:Nat .
